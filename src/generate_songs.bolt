from pathlib import Path
from beet.core.utils import normalize_string
from beet import Sound, SoundConfig

from src.note import load_nbs

SOURCE = "record"

SOUNDS = Path("sounds")
SONGS = Path("songs")

def generate_formatted_string(song_name: str):
    return "TODO"

# memo:
ctx.meta["instruments"] = set()

append function ~/../global/load:
    data modify storage nbs:main songs set value []

for song_stuff in enumerate(SONGS.glob("*.nbs")):
    path = song_stuff[1]
    song_name = normalize_string(path.stem.split(" - ")[0].split("(")[0])
    print("processing", song_name)
    song_index = song_stuff[0]

    append function ~/../global/load:
        data modify storage nbs:main songs append value {
            "name": song_name,
            "index": song_index,
            "formatted_string": generate_formatted_string(song_name)
        }
    
    for chord in load_nbs(path):
        tick = chord[0]
        notes = chord[1]
            #data modify storage nbs:main playing set from storage nbs:main songs[0]
        function f"nbs:song/{song_name}/{tick}":
            at @e[tag=nbs_speaker] function ~/speaker
            at @e[tag=nbs_loudspeaker] function ~/loudspeaker
            function ~/headphones

            if tick % 4 == 0:
                function nbs:global/beat

            for note in notes:
                ctx.meta["instruments"].add(note.instrument)

                append function ~/speaker:
                    playsound f"{note.play_speakers()}"
                
                append function ~/loudspeaker:
                    playsound f"{note.play_loudspeakers()}"

                append function ~/headphones:
                    playsound f"{note.play_headphones()}"


    function f"nbs:song/{song_name}/{tick + 40}":
        function nbs:global/advance


print("ðŸŽ‰ LGTM")